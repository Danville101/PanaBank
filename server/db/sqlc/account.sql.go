// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE  account
SET balance = balance + $1
WHERE account_number = $2
 RETURNING id, owner, card_number, account_number, sort_code, issued_date, expire_date, balance, created_at
`

type AddAccountBalanceParams struct {
	Amount        int64 `json:"amount"`
	AccountNumber int32 `json:"account_number"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.AccountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.CardNumber,
		&i.AccountNumber,
		&i.SortCode,
		&i.IssuedDate,
		&i.ExpireDate,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO account(
      owner,
     card_number,
      account_number,
      sort_code,
      issued_date,
      expire_date,
      balance
) VALUES($1,$2,$3,$4,$5,$6,$7)
RETURNING id, owner, card_number, account_number, sort_code, issued_date, expire_date, balance, created_at
`

type CreateAccountParams struct {
	Owner         string `json:"owner"`
	CardNumber    int64  `json:"card_number"`
	AccountNumber int32  `json:"account_number"`
	SortCode      string `json:"sort_code"`
	IssuedDate    string `json:"issued_date"`
	ExpireDate    string `json:"expire_date"`
	Balance       int64  `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Owner,
		arg.CardNumber,
		arg.AccountNumber,
		arg.SortCode,
		arg.IssuedDate,
		arg.ExpireDate,
		arg.Balance,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.CardNumber,
		&i.AccountNumber,
		&i.SortCode,
		&i.IssuedDate,
		&i.ExpireDate,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, card_number, account_number, sort_code, issued_date, expire_date, balance, created_at FROM account
WHERE account_number =$1
`

func (q *Queries) GetAccount(ctx context.Context, accountNumber int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.CardNumber,
		&i.AccountNumber,
		&i.SortCode,
		&i.IssuedDate,
		&i.ExpireDate,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, owner, card_number, account_number, sort_code, issued_date, expire_date, balance, created_at FROM account
WHERE owner =$1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, owner string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, owner)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.CardNumber,
		&i.AccountNumber,
		&i.SortCode,
		&i.IssuedDate,
		&i.ExpireDate,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, owner, card_number, account_number, sort_code, issued_date, expire_date, balance, created_at FROM account
WHERE account_number =$1 
FOR  UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, accountNumber int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, accountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.CardNumber,
		&i.AccountNumber,
		&i.SortCode,
		&i.IssuedDate,
		&i.ExpireDate,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
