// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: payees.sql

package db

import (
	"context"
)

const createPayee = `-- name: CreatePayee :one
INSERT INTO payees(
     payee_last_name,
     payee_first_name,
     owner_email,
    account_number,
  sort_code 
)VALUES($1,$2,$3,$4,$5)
RETURNING id, payee_first_name, payee_last_name, owner_email, account_number, sort_code
`

type CreatePayeeParams struct {
	PayeeLastName  string `json:"payee_last_name"`
	PayeeFirstName string `json:"payee_first_name"`
	OwnerEmail     string `json:"owner_email"`
	AccountNumber  int32  `json:"account_number"`
	SortCode       string `json:"sort_code"`
}

func (q *Queries) CreatePayee(ctx context.Context, arg CreatePayeeParams) (Payee, error) {
	row := q.db.QueryRowContext(ctx, createPayee,
		arg.PayeeLastName,
		arg.PayeeFirstName,
		arg.OwnerEmail,
		arg.AccountNumber,
		arg.SortCode,
	)
	var i Payee
	err := row.Scan(
		&i.ID,
		&i.PayeeFirstName,
		&i.PayeeLastName,
		&i.OwnerEmail,
		&i.AccountNumber,
		&i.SortCode,
	)
	return i, err
}

const getPayee = `-- name: GetPayee :many
SELECT  DISTINCT    payee_last_name, payee_first_name,account_number,sort_code   FROM payees
WHERE owner_email =$1
`

type GetPayeeRow struct {
	PayeeLastName  string `json:"payee_last_name"`
	PayeeFirstName string `json:"payee_first_name"`
	AccountNumber  int32  `json:"account_number"`
	SortCode       string `json:"sort_code"`
}

func (q *Queries) GetPayee(ctx context.Context, ownerEmail string) ([]GetPayeeRow, error) {
	rows, err := q.db.QueryContext(ctx, getPayee, ownerEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPayeeRow{}
	for rows.Next() {
		var i GetPayeeRow
		if err := rows.Scan(
			&i.PayeeLastName,
			&i.PayeeFirstName,
			&i.AccountNumber,
			&i.SortCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPayeeAccount = `-- name: GetPayeeAccount :one
SELECT  DISTINCT  ID, payee_last_name, payee_first_name,account_number,sort_code   FROM payees
WHERE account_number =$1
`

type GetPayeeAccountRow struct {
	ID             int64  `json:"id"`
	PayeeLastName  string `json:"payee_last_name"`
	PayeeFirstName string `json:"payee_first_name"`
	AccountNumber  int32  `json:"account_number"`
	SortCode       string `json:"sort_code"`
}

func (q *Queries) GetPayeeAccount(ctx context.Context, accountNumber int32) (GetPayeeAccountRow, error) {
	row := q.db.QueryRowContext(ctx, getPayeeAccount, accountNumber)
	var i GetPayeeAccountRow
	err := row.Scan(
		&i.ID,
		&i.PayeeLastName,
		&i.PayeeFirstName,
		&i.AccountNumber,
		&i.SortCode,
	)
	return i, err
}

const getPayeeFavourite = `-- name: GetPayeeFavourite :many
SELECT payee_last_name, payee_first_name,account_number,sort_code  FROM payees
WHERE owner_email =$1
GROUP BY payee_last_name, payee_first_name,account_number,sort_code
HAVING COUNT(account_number) >= 5
`

type GetPayeeFavouriteRow struct {
	PayeeLastName  string `json:"payee_last_name"`
	PayeeFirstName string `json:"payee_first_name"`
	AccountNumber  int32  `json:"account_number"`
	SortCode       string `json:"sort_code"`
}

func (q *Queries) GetPayeeFavourite(ctx context.Context, ownerEmail string) ([]GetPayeeFavouriteRow, error) {
	rows, err := q.db.QueryContext(ctx, getPayeeFavourite, ownerEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPayeeFavouriteRow{}
	for rows.Next() {
		var i GetPayeeFavouriteRow
		if err := rows.Scan(
			&i.PayeeLastName,
			&i.PayeeFirstName,
			&i.AccountNumber,
			&i.SortCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
