// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfer.sql

package db

import (
	"context"
)

const createtransaction = `-- name: Createtransaction :one
INSERT INTO transfers(
      to_first_Name,
     to_last_Name,
     from_sort_code ,     
      from_account,      
      to_sort_code ,     
      to_account,
      amount       
) VALUES($1,$2,$3,$4,$5,$6,$7)
RETURNING id, from_sort_code, from_account, to_first_name, to_last_name, to_sort_code, to_account, amount, created_at
`

type CreatetransactionParams struct {
	ToFirstName  string `json:"to_first_name"`
	ToLastName   string `json:"to_last_name"`
	FromSortCode string `json:"from_sort_code"`
	FromAccount  int32  `json:"from_account"`
	ToSortCode   string `json:"to_sort_code"`
	ToAccount    int32  `json:"to_account"`
	Amount       int64  `json:"amount"`
}

func (q *Queries) Createtransaction(ctx context.Context, arg CreatetransactionParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createtransaction,
		arg.ToFirstName,
		arg.ToLastName,
		arg.FromSortCode,
		arg.FromAccount,
		arg.ToSortCode,
		arg.ToAccount,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromSortCode,
		&i.FromAccount,
		&i.ToFirstName,
		&i.ToLastName,
		&i.ToSortCode,
		&i.ToAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const gettransaction = `-- name: Gettransaction :one
SELECT id, from_sort_code, from_account, to_first_name, to_last_name, to_sort_code, to_account, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) Gettransaction(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, gettransaction, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromSortCode,
		&i.FromAccount,
		&i.ToFirstName,
		&i.ToLastName,
		&i.ToSortCode,
		&i.ToAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listtransaction = `-- name: Listtransaction :many
SELECT id, from_sort_code, from_account, to_first_name, to_last_name, to_sort_code, to_account, amount, created_at FROM transfers
WHERE from_account = $1 OR to_account = $2
ORDER BY account_number
LIMIT $3
OFFSET $4
`

type ListtransactionParams struct {
	FromAccount int32 `json:"from_account"`
	ToAccount   int32 `json:"to_account"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) Listtransaction(ctx context.Context, arg ListtransactionParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listtransaction,
		arg.FromAccount,
		arg.ToAccount,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromSortCode,
			&i.FromAccount,
			&i.ToFirstName,
			&i.ToLastName,
			&i.ToSortCode,
			&i.ToAccount,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
